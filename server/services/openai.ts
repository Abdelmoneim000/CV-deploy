import OpenAI from "openai";

// Le mod√®le OpenAI le plus r√©cent est "gpt-4o" qui a √©t√© publi√© le 13 mai 2024.
// Ne pas changer sauf si explicitement demand√© par l'utilisateur
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "MY API KEY",
});

// Types pour les suggestions de contenu
export type ContentSuggestionType = 
  | 'experience'
  | 'skills'
  | 'summary'
  | 'education'
  | 'languages'
  | 'achievements'
  | 'strengths';

export interface ContentSuggestion {
  id: string;
  text: string;
  type: ContentSuggestionType;
  confidence: number;
  isApplied?: boolean;
}

// Am√©liorer le texte d'une section sp√©cifique
export async function improveText(
  text: string,
  sectionType: string,
  customPrompt?: string
): Promise<string> {
  const defaultPrompt = getPromptForSection(sectionType);
  const prompt = customPrompt || defaultPrompt;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "Vous √™tes un expert en r√©daction de CV professionnels. Votre t√¢che est d'am√©liorer le texte fourni pour un CV."
        },
        {
          role: "user",
          content: `${prompt}\n\nTexte original:\n${text}`
        }
      ],
      temperature: 0.7,
    });

    return response.choices[0].message.content || text;
  } catch (error) {
    console.error("Erreur lors de l'am√©lioration du texte avec OpenAI:", error);
    throw new Error("Impossible d'am√©liorer le texte. Veuillez r√©essayer plus tard.");
  }
}

// Adapter le CV √† une offre d'emploi
export async function adaptCVToJobOffer(
  cv: any,
  jobDescription: string
): Promise<any> {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "Vous √™tes un expert en recrutement et en adaptation de CV. Votre t√¢che est d'analyser une offre d'emploi et de proposer des modifications au CV pour maximiser ses chances d'√™tre retenu."
        },
        {
          role: "user",
          content: `Voici une description de poste:\n\n${jobDescription}\n\nVoici le CV actuel:\n${JSON.stringify(cv, null, 2)}\n\nAnalysez cette offre d'emploi et modifiez directement le CV pour l'adapter √† cette offre. Changez uniquement ce qui est n√©cessaire pour mettre en valeur les comp√©tences et exp√©riences pertinentes. Retournez le CV complet modifi√© au format JSON avec exactement la m√™me structure, mais avec les sections adapt√©es.`
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.7,
    });

    // Analyser et retourner directement le CV adapt√©
    const content = response.choices[0].message.content;
    const adaptedCV = content ? JSON.parse(content) : {};
    return adaptedCV;
  } catch (error) {
    console.error("Erreur lors de l'adaptation du CV avec OpenAI:", error);
    throw new Error("Impossible d'adapter le CV. Veuillez r√©essayer plus tard.");
  }
}

// Traduire le CV
export async function translateCV(
  cv: any,
  targetLanguage: string
): Promise<any> {
  try {
    // Cr√©ation d'une version du CV avec tous les textes traduits
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `Vous √™tes un traducteur professionnel sp√©cialis√© dans les CV. Votre t√¢che est de traduire tout le contenu textuel d'un CV en ${targetLanguage} tout en conservant la structure JSON.`
        },
        {
          role: "user",
          content: `Traduisez tous les textes de ce CV en ${targetLanguage}. Conservez la structure exacte du JSON, modifiez uniquement les valeurs textuelles.\n\n${JSON.stringify(cv, null, 2)}`
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.3,
    });

    const content = response.choices[0].message.content;
    const translatedCV = content ? JSON.parse(content) : {};
    return translatedCV;
  } catch (error) {
    console.error("Erreur lors de la traduction du CV avec OpenAI:", error);
    throw new Error(`Impossible de traduire le CV en ${targetLanguage}. Veuillez r√©essayer plus tard.`);
  }
}

// Fonction utilitaire pour obtenir le prompt adapt√© √† chaque type de section
// Analyser le CV complet et fournir des scores de pertinence et des conseils
export async function analyzeCVSections(cv: any, jobPosition?: string): Promise<any> {
  try {
    let jobContext = "";
    if (jobPosition) {
      jobContext = `Le poste vis√© est : ${jobPosition}. Analysez le CV en fonction de ce poste sp√©cifique.`;
    } else {
      jobContext = "Analysez le CV en fonction des meilleures pratiques g√©n√©rales pour les CV professionnels.";
    }

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "Vous √™tes un expert en recrutement et en r√©daction de CV. Votre t√¢che est d'analyser objectivement chaque section d'un CV et de fournir un score de pertinence ainsi que des conseils d'optimisation pr√©cis."
        },
        {
          role: "user",
          content: `${jobContext}\n\nVoici le CV √† analyser :\n${JSON.stringify(cv, null, 2)}\n\nPour chaque section du CV, fournissez :\n1. Un score de pertinence sur 10\n2. Au moins 2 conseils d'optimisation sp√©cifiques et actionnables\n3. Une explication br√®ve de ce qui pourrait √™tre am√©lior√©\n\nPr√©sentez les r√©sultats au format JSON avec la structure suivante :\n{\n  "sections": [\n    {\n      "section": "Le nom de la section",\n      "score": 7,\n      "tips": ["Conseil 1", "Conseil 2"],\n      "explanation": "Explication br√®ve"\n    },\n    ...\n  ],\n  "overallScore": 7.5,\n  "topRecommendations": ["Recommandation principale 1", "Recommandation principale 2", "Recommandation principale 3"]\n}`
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.5,
    });

    const content = response.choices[0].message.content;
    return content ? JSON.parse(content) : {};
  } catch (error) {
    console.error("Erreur lors de l'analyse du CV avec OpenAI:", error);
    throw new Error("Impossible d'analyser le CV. Veuillez r√©essayer plus tard.");
  }
}

// Fonction pour sugg√©rer des ic√¥nes emoji pour une section de CV
export async function suggestSectionEmoji(
  sectionType: string,
  sectionTitle: string,
  sectionContent?: string
): Promise<string[]> {
  try {
    let contentDescription = "";
    if (sectionContent) {
      // Limiter la taille du contenu pour √©conomiser des tokens
      contentDescription = `Contenu de la section: ${sectionContent.slice(0, 300)}...`;
    }

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "Vous √™tes un assistant sp√©cialis√© dans la conception de CV. Votre t√¢che est de sugg√©rer des emojis pertinents qui pourraient √™tre utilis√©s comme ic√¥ne pour une section sp√©cifique d'un CV."
        },
        {
          role: "user",
          content: `Sugg√©rez 5 emojis pertinents et professionnels qui pourraient repr√©senter une section de CV de type "${sectionType}" intitul√©e "${sectionTitle}". ${contentDescription}\n\nLes emojis doivent √™tre visuellement distincts, professionnels et en rapport avec le contenu de la section. Retournez uniquement les emojis s√©par√©s par des virgules, sans texte suppl√©mentaire.`
        }
      ],
      temperature: 0.7,
    });

    // Nettoyer et parser la r√©ponse pour extraire uniquement les emojis
    const emojiText = response.choices[0].message.content || "";
    const emojis = emojiText
      .split(',')
      .map(emoji => emoji.trim())
      .filter(emoji => emoji.length > 0);

    return emojis.length > 0 ? emojis : ["üìÑ", "üìã", "üìù", "üìä", "üìà"]; // Emojis par d√©faut
  } catch (error) {
    console.error("Erreur lors de la suggestion d'emojis avec OpenAI:", error);
    // En cas d'erreur, retourner des emojis g√©n√©riques li√©s aux CV
    return ["üìÑ", "üìã", "üìù", "üìä", "üìà"];
  }
}

// G√©n√©rer des suggestions de contenu intelligent
export async function generateContentSuggestions(
  cv: any,
  sectionType: ContentSuggestionType,
  jobPosition?: string
): Promise<ContentSuggestion[]> {
  try {
    let jobContext = jobPosition 
      ? `Le poste vis√© est : ${jobPosition}. G√©n√©rez des suggestions adapt√©es √† ce poste.` 
      : "";

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "Vous √™tes un expert en r√©daction de CV professionnels. Votre t√¢che est de g√©n√©rer des suggestions pertinentes et bien formul√©es pour am√©liorer un CV."
        },
        {
          role: "user",
          content: `${jobContext}\n\nVoici le CV actuel :\n${JSON.stringify(cv, null, 2)}\n\nG√©n√©rez 3 suggestions de qualit√© pour la section "${sectionType}" de ce CV. Chaque suggestion doit √™tre autonome, professionnelle et pr√™te √† √™tre int√©gr√©e directement dans le CV. Pour chaque suggestion, fournissez un niveau de confiance entre 0 et 1 indiquant √† quel point vous pensez que cette suggestion am√©liore le CV existant.\n\nRetournez les r√©sultats au format JSON avec la structure suivante :\n[\n  {\n    "id": "uniqueId1",\n    "text": "Le texte de la suggestion",\n    "type": "${sectionType}",\n    "confidence": 0.85\n  },\n  ...\n]`
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.7,
    });

    const content = response.choices[0].message.content;
    const suggestions = content ? JSON.parse(content) : [];
    return suggestions;
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration de suggestions avec OpenAI:", error);
    throw new Error("Impossible de g√©n√©rer des suggestions de contenu. Veuillez r√©essayer plus tard.");
  }
}

function getPromptForSection(sectionType: string): string {
  const prompts: Record<string, string> = {
    summary: "Am√©liorez ce r√©sum√© professionnel pour qu'il soit plus percutant, clair et professionnel. Mettez en valeur les forces et les exp√©riences les plus pertinentes. Restez concis (maximum 4-5 phrases) et direct.",
    
    experience: "Am√©liorez cette description d'exp√©rience professionnelle pour la rendre plus impactante. Utilisez des verbes d'action, quantifiez les r√©alisations lorsque possible, et mettez en √©vidence les comp√©tences et r√©alisations. Conservez le m√™me niveau de d√©tail mais rendez-le plus efficace.",
    
    education: "Am√©liorez cette description de formation pour mettre en valeur les aspects les plus pertinents pour un recruteur. Rendez-la plus pr√©cise et professionnelle.",
    
    skills: "Reformulez cette liste de comp√©tences pour qu'elle soit plus pr√©cise, avec des termes plus professionnels et adapt√©s au march√© de l'emploi actuel.",
    
    languages: "Reformulez cette description de comp√©tences linguistiques de mani√®re plus professionnelle et pr√©cise.",
    
    // Par d√©faut
    default: "Am√©liorez ce texte pour un CV professionnel. Rendez-le plus concis, pr√©cis et impactant tout en conservant les informations essentielles."
  };
  
  return prompts[sectionType] || prompts.default;
}

// Review a section: detect issues and suggest fixes
export async function reviewSection(
  text: string,
  sectionType: string
): Promise<{ issues: string[]; suggestion: string; improvedText: string }> {
  const prompt = `You are an expert CV reviewer. Analyze the following text for spelling, grammar, clarity, and style issues. List all detected issues. Then suggest a single improved version of the text. Respond in JSON with the following fields: issues (array of strings), suggestion (string, a summary of the main fix), improvedText (string, the improved version).\n\nSection type: ${sectionType}\n\nText:\n${text}`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "You are an expert CV reviewer."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.3,
    });
    const content = response.choices[0].message.content;
    if (!content) throw new Error("No response from OpenAI");
    return JSON.parse(content);
  } catch (error) {
    console.error("Error in OpenAI reviewSection:", error);
    throw new Error("Unable to review section. Please try again later.");
  }
}